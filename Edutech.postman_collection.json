{
	"info": {
		"_postman_id": "2087b651-5447-4103-996a-efbaefb7a1ec",
		"name": "Edutech",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13642119"
	},
	"item": [
		{
			"name": "ms-courses",
			"item": [
				{
					"name": "course-categories",
					"item": [
						{
							"name": "/api/course-categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category).to.be.an('object');",
											"        pm.expect(category.id).to.exist.and.to.be.a('number');",
											"        pm.expect(category.name).to.exist.and.to.be.a('string');",
											"        pm.expect(category.description).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name and description are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        pm.expect(category.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/course-categories",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.name).to.exist;",
											"    pm.expect(responseData.description).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/course-categories/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"name\": \"Test\",\r\n        \"description\": \"Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/course-categories",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name and description must be non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"id\": 1,\r\n        \"name\": \"Test\",\r\n        \"description\": \"Categoría de Programación\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/course-categories/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course-categories/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/api/course-categories/3",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"course-categories",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "course",
					"item": [
						{
							"name": "/api/course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category).to.be.an('object');",
											"        pm.expect(category.id).to.exist.and.to.be.a('number');",
											"        pm.expect(category.name).to.exist.and.to.be.a('string');",
											"        pm.expect(category.description).to.exist.and.to.be.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name and description are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"        pm.expect(category.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:9002/api/courses",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.name).to.exist;",
											"    pm.expect(responseData.description).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.be.a('number');",
											"  pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9002/api/course/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Description is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"name\": \"Test\",\r\n        \"description\": \"Test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9002/api/course",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - id, name, and description\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('description');",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Name and description must be non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"id\": 1,\r\n        \"name\": \"Test\",\r\n        \"description\": \"Categoría de Programación\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9002/api/course/1",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/course/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:9002/api/course/3",
									"host": [
										"localhost"
									],
									"port": "9002",
									"path": [
										"api",
										"course",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ms-users",
			"item": [
				{
					"name": "roles",
					"item": [
						{
							"name": "/api/roles",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:9001/api/roles",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/roles/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response includes the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.include.all.keys('id', 'firstName', 'lastName', 'email', 'passwordHash', 'roleId', 'isActive', 'createdAt', 'updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/, \"Email should be in a valid format\");",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt and updatedAt are in valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
											"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9001/api/users/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"users",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/roles",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rol Nuevo\",\r\n    \"description\": \"Support del sistema\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9001/api/roles",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/roles/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.id).to.exist;",
											"  pm.expect(responseData.firstName).to.exist;",
											"  pm.expect(responseData.lastName).to.exist;",
											"  pm.expect(responseData.email).to.exist;",
											"  pm.expect(responseData.passwordHash).to.exist;",
											"  pm.expect(responseData.roleId).to.exist;",
											"  pm.expect(responseData.isActive).to.exist;",
											"  pm.expect(responseData.createdAt).to.exist;",
											"  pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
											"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
											"});",
											"",
											"",
											"pm.test(\"IsActive field is a boolean value\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.isActive).to.be.a('boolean');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rol 20 Actualizado\",\r\n    \"description\": \"Support del sistema\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9001/api/roles/20",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"roles",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/roles/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:9001/api/roles/20",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"roles",
										"20"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "/api/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(user => {",
											"        pm.expect(user).to.have.property('id');",
											"        pm.expect(user).to.have.property('firstName');",
											"        pm.expect(user).to.have.property('lastName');",
											"        pm.expect(user).to.have.property('email');",
											"        pm.expect(user).to.have.property('passwordHash');",
											"        pm.expect(user).to.have.property('roleId');",
											"        pm.expect(user).to.have.property('isActive');",
											"        pm.expect(user).to.have.property('createdAt');",
											"        pm.expect(user).to.have.property('updatedAt');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(user) {",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt and updatedAt are in valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(function(user) {",
											"        pm.expect(user.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
											"        pm.expect(user.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"IsActive field is a boolean value\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function(user) {",
											"    pm.expect(user.isActive).to.be.a('boolean');",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:9001/api/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/users/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.firstName).to.exist;",
											"    pm.expect(responseData.lastName).to.exist;",
											"    pm.expect(responseData.email).to.exist;",
											"    pm.expect(responseData.passwordHash).to.exist;",
											"    pm.expect(responseData.roleId).to.exist;",
											"    pm.expect(responseData.isActive).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt and UpdatedAt are in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
											"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9001/api/users/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"users",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/users",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \"firstName\": \"Admin2\",\r\n    \"lastName\": \"Principal\",\r\n    \"email\": \"admin222@edu.cl\",\r\n    \"passwordHash\": \"hashedpassword\",\r\n    \"roleId\": 1,\r\n    \"isActive\": true,\r\n    \"createdAt\": \"2025-05-17T19:59:41Z\",\r\n    \"updatedAt\": \"2025-05-17T19:59:41Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9001/api/users",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/users/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('id');",
											"    pm.expect(responseData).to.have.property('firstName');",
											"    pm.expect(responseData).to.have.property('lastName');",
											"    pm.expect(responseData).to.have.property('email');",
											"    pm.expect(responseData).to.have.property('passwordHash');",
											"    pm.expect(responseData).to.have.property('roleId');",
											"    pm.expect(responseData).to.have.property('isActive');",
											"    pm.expect(responseData).to.have.property('createdAt');",
											"    pm.expect(responseData).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.email).to.be.a('string');",
											"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"});",
											"",
											"",
											"pm.test(\"IsActive field must be a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.isActive).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt and UpdatedAt are in valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
											"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"Principal\",\r\n    \"email\": \"admin22222@edu.cl\",\r\n    \"passwordHash\": \"hashedpassword\",\r\n    \"roleId\": 1,\r\n    \"isActive\": true,\r\n    \"createdAt\": \"2025-05-17T19:59:41Z\",\r\n    \"updatedAt\": \"2025-05-17T19:59:41Z\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:9001/api/users/30",
									"host": [
										"localhost"
									],
									"port": "9001",
									"path": [
										"api",
										"users",
										"30"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/users/{id}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/api/users/9",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"users",
										"9"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"type": "default"
		}
	]
}