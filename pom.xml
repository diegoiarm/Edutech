<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Modelo base de Maven -->
    <modelVersion>4.0.0</modelVersion>

    <!-- Coordenadas GAV (GroupId, ArtifactId, Version) de mi proyecto padre -->
    <groupId>com.edutech</groupId>
    <artifactId>classroom</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <!-- Indica que este proyecto es un contenedor (no genera un .jar, solo agrupa módulos) -->
    <packaging>pom</packaging>

    <name>EduTech Classroom Parent Project</name>
    <description>Parent POM for all EduTech microservices and shared modules</description>

    <!-- 
    Propiedades comunes a todos los módulos. 
    Se reutilizan en todo el proyecto para evitar duplicación.
    -->
    <properties>

        <!-- Versión del compilador de Maven -->
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
                    
        <!-- Versión de Java a utilizar (21 incluye mejoras de rendimiento y compatibilidad con Spring Boot 3) -->
        <java.version>21</java.version>

        <!-- Versión de Spring Boot base para microservicios -->
        <spring-boot.version>3.2.12</spring-boot.version>

        <!-- Versión de Spring Cloud para herramientas como Eureka, Config Server, Gateway, etc. -->
        <spring-cloud.version>2023.0.2</spring-cloud.version>

        <!-- Versión de MapStruct, útil para generar mapeos automáticos entre DTOs y entidades -->
        <mapstruct.version>1.5.5.Final</mapstruct.version>

        <!-- Versión de Lombok, evita escribir constructores, getters/setters manualmente -->
        <lombok.version>1.18.30</lombok.version>

        <!-- Versión de Jakarta Validation (Bean Validation API)  -->
        <jakarta.validation-api.version>3.0.2</jakarta.validation-api.version>

        <!-- Versión de MySQL -->
        <mysql-connector-j.version>8.4.0</mysql-connector-j.version>

        <!-- Versión de biblioteca common -->
        <com-edutech-common.version>0.0.1-SNAPSHOT</com-edutech-common.version>

        <!-- Configuración del compilador de Java -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

    <!-- 
    BOM (Bill of Materials)
    Agrupa y gestiona las versiones de dependencias para evitar conflictos.
    -->
    <dependencyManagement>
        <dependencies>

            <!-- BOM de Spring Boot: gestiona versiones compatibles entre starter, data-jpa, web, etc. -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- BOM de Spring Cloud: para versiones compatibles de Eureka, Feign, Config, etc. -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Driver JDBC de MySQL, permite conectar nuestras apps con una base de datos MySQL -->
            <!-- Ejemplo de uso: conexión a base de datos de producción o desarrollo -->
            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>${mysql-connector-j.version}</version>
            </dependency>

            <!-- MapStruct: generador de código para mapeo entre entidades y DTOs -->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <!-- Procesador de anotaciones de MapStruct -->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct-processor</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <!-- Lombok para reducir boilerplate con anotaciones como @Getter, @Builder -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!-- 
                Validaciones (Bean Validation API) 
                Jakarta Validation te permite definir y validar restricciones en modelos 
                de objetos Java mediante el uso de anotaciones, por ejemplo, @NotNull 
                para asegurar que un campo no sea nulo o @Size(min=2, max=30)
                para restringir la longitud de una cadena.
            -->
            <dependency>
                <groupId>jakarta.validation</groupId>
                <artifactId>jakarta.validation-api</artifactId>
                <version>${jakarta.validation-api.version}</version>
            </dependency>

            <!-- Módulo común con DTOs, excepciones, utilidades, etc. -->
            <dependency>
                <groupId>com.edutech</groupId>
                <artifactId>common</artifactId>
                <version>${com-edutech-common.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <!-- Plugins comunes a todos los módulos del proyecto -->
    <build>
        <pluginManagement>
            <plugins>
                <!-- 
                Plugin del compilador de Java. 
                Se encarga de compilar el código fuente y ejecutar los "annotation processors" como Lombok o MapStruct.
                -->
                <plugin>
                    <!-- Compilador de Maven -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        
                        <!-- Versión del lenguaje Java -->
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        
                        <!--
                        Habilita el uso del nombre real de los parámetros en tiempo de ejecución.
                        Esto es necesario para que Spring MVC pueda resolver correctamente anotaciones
                        como @PathVariable, @RequestParam y @RequestBody sin requerir nombres explícitos.
                        -->
                        <compilerArgs>
                            <arg>-parameters</arg>
                        </compilerArgs>

                        <!-- Procesadores de anotaciones -->
                        <annotationProcessorPaths>
                            
                            <!-- Procesador de anotaciones para generar los mapeos automáticos de MapStruct -->
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstruct.version}</version>
                            </path>

                            <!-- Procesador de anotaciones de Lombok (genera getters, setters, etc. en tiempo de compilación) -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>

                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <!-- 
                Plugin de Spring Boot. 
                Permite ejecutar la aplicación con `mvn spring-boot:run` y empaquetar como .jar con dependencias.
                -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <!--
                    Ejemplo: 
                    mvn clean install
                    genera un archivo target/mi-aplicacion.jar que incluye todas las dependencias necesarias para ejecutarse.
                    -->
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

    <!-- 
    Módulos hijos del proyecto. 
    Cada uno es un subproyecto independiente (microservicio o librería común).
    -->
    <modules>
        <module>common</module>             <!-- Librería compartida entre servicios (DTOs, utilidades, excepciones) -->
        <module>eureka-server</module>   <!-- Microservicios del módulo autenticación y gestión de usuarios -->
        <module>identity-service</module>   <!-- Microservicios del módulo autenticación y gestión de usuarios -->
        <module>academic-service</module>   <!-- Microservicios del módulo académico y gestión de cursos -->
        <module>marks-service</module>   <!-- Microservicios de quizzes y calificaciones  -->
        <module>payment-service</module>   <!-- Microservicios de los pagos y cupones de descuento -->
        <module>support-service</module>   <!-- Microservicios de soporte  -->
    </modules>

</project>
